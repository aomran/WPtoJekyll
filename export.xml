<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.2" created="2013-08-04 21:25" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Ahmed Omran</title>
	<link>http://www.aomran.com</link>
	<description>Educator and Web Developer</description>
	<pubDate>Sun, 04 Aug 2013 21:25:33 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.aomran.com</wp:base_site_url>
	<wp:base_blog_url>http://www.aomran.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>riverjade</wp:author_login><wp:author_email>aomra015@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Ahmed]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.5.2</generator>

	<item>
		<title>Hello world indeed!</title>
		<link>http://www.aomran.com/hello-world/</link>
		<pubDate>Sun, 26 Aug 2012 07:07:11 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://blog-aomran.rhcloud.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Well I've finally decided to use this online space properly and put a blog on it. Whether I actually start to blog regularly will be interesting to see. Right now I am busy with many projects but I think I can find the time to blog every now and then :)

Another piece of news is that I just moved the websites that I maintain to a new server, everything is now hosted on <a title="Dream Host" href="http://www.dreamhost.com" target="_blank">dreamhost.com</a>. I'm hoping that this host will satisfy my needs, I really don't want to look around for another web-host. They do sound promising though so we'll see what happens. If for some reason you want to try dreamhost then use <del>my $50 coupon "AOMRAN" (we might as well both benefit from this, I get about $60 for you signing up and you save some money)</del>.

In the next few hours I'll be updating the website design with a beautiful Wordpress theme from a <a title="German web designer" href="http://www.elmastudio.de/" target="_blank">German web designer</a> and installing some plugins so that everything runs smoothly on this blog. I would have designed the website myself but getting exactly what I want (minimalistic, responsive, and properly coded) would take me weeks. I'm taking the easy way out so that I have time for the projects that I'm working on.

I'll tell you more about what I'm doing later.

Cheers]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2012-08-26 03:07:11</wp:post_date>
		<wp:post_date_gmt>2012-08-26 07:07:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>From Dreamhost deception to the OpenShift cloud</title>
		<link>http://www.aomran.com/from-dreamhost-deception-to-the-openshift-cloud/</link>
		<pubDate>Mon, 03 Sep 2012 03:49:59 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[Last week I moved some of the websites that I maintain to dreamhost and I have to say that it was a <strong>huge waste of time</strong>. I had trialled their servers for a couple of weeks before migrating and everything was fine but the server performance was atrocious as soon as they started charging me for hosting.

Dreamhost offers unlimited disk space but few need this. A Wordpress installation is less than 20 megabytes and a gigabyte of disk space is worth literarily twelve cents on <a href="http://aws.amazon.com/s3/" target="_blank">amazon</a>. The unlimited bandwidth is a useless measure since they limit memory usage. The bandwidth isn't even unlimited, they will (<a href="http://dreamhost.com/unlimited-policy/" target="_blank">according to them</a>) ask you to move to a dedicated host if you start affecting server performance.

Most of the websites that I own or maintain (for clients) are tiny and don't need a dedicated server. I knew that the unlimited disk/bandwidth were bullshit measures so I focused on what was important to me at that point. I needed a server where I could host many small websites and the dreamhost support team assured me that they had the perfect product.

What I did was install four websites (three of them wordpress installations) using one user. The websites were excruciatingly slow so I emailed the dreamhost support. I was notified that I was going over the shared server memory limits. I have never had memory limit problems before and I've been on some pretty crappy hosts. Throughout the whole process they were trying to sell me a Virtual Private Server and copy/pasting "database optimization" solutions that were irrelevant to my situation. Why would I ever buy a VPS from dreamhost for a few websites which get very little traffic.

Anyhow, after doing some research I found out that dreamhost has a 90Mbyte (unconfirmed because dreamhost refuses to tell me) memory limit <em>per user</em>. So instead of trying to sell me a VPS they could have told me that creating a user for each domain/subdomain would solve the issue. Dreamhost is quick with the support but one can't say their support is useful. I'd rather wait a couple of days to get a real solution rather than get a sales pitch every few hours...

I have already started moving all of my websites away from dreamhost because I don't appreciate the deception. I'm not going to stick around to find other limitations... I can't trust their services for my self nor my clients.

Anyhow everything that I do is a learning experience; in this case I was pushed to finally try Openshift. My website is now hosted (for free) on a cloud server (Amazon US east I believe) thanks to the wonderful people at <a title="Openshift by Red Hat" href="https://openshift.redhat.com" target="_blank">Openshift by Red Hat</a>. The website runs much faster, the limitations are crystal clear and of course it doesn't hurt that I don't pay anything.

Openshift is a PaaS (<a title="platform as a service" href="https://openshift.redhat.com/community/paas" target="_blank">platform as a service</a>); in layman's terms it means they manage the servers (at Amazon) and all you have to do is code or make use of code! My next blog post will expand on this topic and provide a guide to help people get their websites hosted on Openshift.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2012-09-02 23:49:59</wp:post_date>
		<wp:post_date_gmt>2012-09-03 03:49:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>from-dreamhost-deception-to-the-openshift-cloud</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="category" nicename="cloud-hosting"><![CDATA[Cloud hosting]]></category>
		<category domain="post_tag" nicename="dreamhost"><![CDATA[dreamhost]]></category>
		<category domain="post_tag" nicename="hosting"><![CDATA[hosting]]></category>
		<category domain="post_tag" nicename="openshift"><![CDATA[openshift]]></category>
		<category domain="post_tag" nicename="paas"><![CDATA[PaaS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The best laid schemes of mice and men</title>
		<link>http://www.aomran.com/the-best-laid-schemes-of-mice-and-men/</link>
		<pubDate>Sat, 13 Apr 2013 14:45:42 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[Eight months ago I started this blog with the intention of writing something at least once every week. I had just finished my Bachelors of Education and had very little to do. The education program at the University of Ottawa was a tremendous learning experience but the job market was depressing (and probably still is for some). New, excited and innovative people were graduating the program with a lot of passion but with very few opportunities here in Canada.

If you were lucky, then you would have landed an occasional teaching job. Occasional teaching means you sit beside the phone and be "on-call" whenever the schools need you. This could be early in the morning (so we're talking 5 to 6 AM). Once you do get the call, your job is to take attendance, manage behaviour and make sure students are doing the work that was assigned to them. To understand how difficult this is... take a moment to remember the things you or your classmates used to do when your regular teacher wasn't around. Going from occasional to long-term occasional, then to part-time, and then to full-time teaching could take years and it's a very informal process.

So making a dent in the system and improving education is easier said than done. My goal wasn't to just get a job; my goal was to be an outstanding educator and to bring a meaningful learning experience to as many students as possible. I wanted to be helping students discover what they’re passionate about and providing them with the guidance they needed to succeed.

In July, I received an offer from <a title="Canada eSchool" href="http://www.canadaeschool.ca/" target="_blank">eSchool</a> to teach an online grade 12 chemistry class. These courses are self-paced, starting when the student signs up and ending when the student has taken the final exam. One of my first few students was in danger of losing her acceptance to university because of a low average. I received a desperate email from the parents asking me if I could help their daughter get through a make-up course (58 hours of work) in about 2 weeks. She did it but I had to work pretty much full time to keep up. My reward - $110, a great story, and the satisfaction that I helped someone not only learn a lot but also bypass probably the biggest crisis of their life so far. I have been teaching for about 9 months, so I have many more stories but they'll have to wait for now.

In September I got the opportunity to help eSchool in their <a title="eSchool Office" href="https://maps.google.ca/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=921+Notre+Dame,+Embrun,+ON&amp;sll=45.271812,-75.286242&amp;sspn=0.006901,0.013797&amp;ie=UTF8&amp;hq=&amp;hnear=921+Notre+Dame+St,+Russell,+Prescott+and+Russell+United+Counties,+Ontario&amp;z=16" target="_blank">main office</a>; I was hired to create courses, ensure that all courses meet Ministry of Education requirements, and be involved with the technical infrastructure at the school. This experience has been a valuable one; I learned that:
<ul>
	<li>Technology is very expensive and there are a lot of predators who take advantage of non-technical administrators to make a lot of money. So technical projects are tightly budgeted, take a very long time to approve and their scope is usually not very ambitious. A lean/agile technical project can only work if everyone involved is tech-savvy and/or not scarred by countless previous failed tech projects.</li>
	<li>Building an outstanding curriculum is not only challenging but it's also time consuming and expensive. If people are not compensated well then they might be tempted to take shortcuts. I was guilty of this, and I like to think of myself as the charitable kind.</li>
	<li>Projects will expand to fill the time that is allotted to them. When we were pressed by a looming deadline (like a Ministry Inspection date) then we got things done. If someone was given an indefinite time to build a course then it was never built.</li>
	<li>Building anything remarkable requires full commitment from everyone involved. You can do a good job with people who are partly committed, but it takes exponentially more commitment to get from good to remarkable.</li>
</ul>
While being an instructor, course developer and technologist, I was also immersed in massive open online courses (<a title="MOOC" href="http://en.wikipedia.org/wiki/Massive_open_online_course" target="_blank">MOOC</a>s) during my spare time. I completed:
<ul>
	<li><span style="line-height: 1.6;"><a title="Learn to Program: The Fundamentals" href="https://www.coursera.org/course/programming1" target="_blank">Learn to Program: The Fundamentals</a> (Coursera)</span></li>
	<li><span style="line-height: 1.6;"><a title="An Introduction to Interactive Programming in Python" href="https://www.coursera.org/course/interactivepython" target="_blank">An Introduction to Interactive Programming in Python</a> (Coursera)</span></li>
	<li><span style="line-height: 1.6;"><a title="Gamification" href="https://www.coursera.org/course/gamification" target="_blank">Gamification</a> (Coursera)</span></li>
	<li><span style="line-height: 1.6;"><a title="Introduction to Databases" href="https://class2go.stanford.edu/db/Winter2013" target="_blank">Introduction to Databases</a> (Stanford's Class2Go)</span></li>
	<li><span style="line-height: 1.6;"><a title="SAAS Course" href="https://www.edx.org/courses/BerkeleyX/CS169.1x/2013_March/about" target="_blank">CS169.1x: Software Engineering for Software as a Service</a> (edX)</span></li>
</ul>
2012 was "<a title="Year of the MOOC - NYT" href="http://www.nytimes.com/2012/11/04/education/edlife/massive-open-online-courses-are-multiplying-at-a-rapid-pace.html" target="_blank">the year of the MOOC</a>" and I'm so glad I was a part of it! The e-learning experience was phenomenal - the content top-notch and the instructors world class. The Coursera classes excelled for me personally because they involved peer-assessment and had great forums. MOOCs have a long way to go but they are already filling a major need.

My plan for this summer is to take a break from teaching and take the time to improve my technical skills. I want a better understanding of developers and the tech industry, I want to make some key connections in the Canadian tech world and ultimately be an advocate for educators. I want to become a professional developer who can speak for teachers and make sure solid pedagogical principles are used to develop edtech tools.

My passion for education and technology might take me in many directions. Who knows what the future has in store for us...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2013-04-13 10:45:42</wp:post_date>
		<wp:post_date_gmt>2013-04-13 14:45:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-best-laid-schemes-of-mice-and-men</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coursera"><![CDATA[coursera]]></category>
		<category domain="post_tag" nicename="e-learning"><![CDATA[e-learning]]></category>
		<category domain="post_tag" nicename="edtech"><![CDATA[edtech]]></category>
		<category domain="category" nicename="education"><![CDATA[Education]]></category>
		<category domain="post_tag" nicename="mooc"><![CDATA[MOOC]]></category>
		<category domain="post_tag" nicename="technology"><![CDATA[technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What makes an exceptional learning experience?</title>
		<link>http://www.aomran.com/what-makes-an-exceptional-learning-experience/</link>
		<pubDate>Mon, 06 May 2013 22:32:44 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[It takes 10,000 hours of practice to become an expert in anything - so claims Malcolm Gladwell in his book "<a title="Outliers Book" href="http://en.wikipedia.org/wiki/Outliers_(book)" target="_blank">Outliers</a>". Students spend about <a title="190 days/year in school" href="http://www.edu.gov.on.ca/eng/general/list/calendar/holidaye.html" target="_blank">190 days per year in school</a> for at least twelve years. A typical school day is about 7 hours, so in total students spend about 16000 hours in school before they graduate from high school.

A teacher in Ontario requires a bachelors degree and an education degree, so that's at least four years of university - five years for most. After about 20,000 hours of school and about two and a half years of involvement in education, I can't immediately define what makes an exceptional learning experience. I have been on both sides of the fence, as a student and teacher, so why is it so hard to coherently outline what makes an authentic, memorable, and meaningful learning experience?

I think this is because I have had both good and bad learning experiences but <a title="We Remember Bad Times Better Than Good" href="http://www.sciencedaily.com/releases/2007/08/070828110711.htm" target="_blank">"we remember bad times better than good"</a>. So it's easy for me (and others) to see the bad - schools can sometimes be void of meaning, boring, passive, repetitive, and "one size fits all". Instead of focusing on the bad in our attempt at <a title="Hacking education - book review" href="http://onlinelearninginsights.wordpress.com/2013/04/23/what-higher-ed-can-learn-from-uncollege-and-the-book-hacking-your-education/" target="_blank">hacking education</a>, I believe we should focus on the positives and work to make them a more common occurrence.

This article is an opportunity to reflect on what I have learned and to outline in a concise and coherent manner what I think makes for an exceptional educational experience. My goal is for the ideas here to apply to all forms of education - offline, online, in-person, distance education, workshops etc.

<strong>Meaningful and Memorable</strong>
Teachers, students and parents as a group are responsible for learning but sometimes in our effort to meet curriculum expectations, get high grades, get ahead in life, etc., we can lose sight of the real purpose of education. For example, a biology lesson about the <a title="Khan Academy - Krebs Cycle" href="https://www.khanacademy.org/science/biology/cellular-respiration/v/krebs---citric-acid-cycle" target="_blank">Krebs Cycle</a> can degenerate to the point where all that matters is that students memorize the steps and can regurgitate them on demand. We have to ask ourselves - what is the point? Will students even remember this stuff after the exam? Will this be an experience that ignites a spark in these students, a spark that triggers a lifelong passion for science, or even an appreciation of science?

What if we compromised a bit, <a title="Tyler DeWitt: Hey science teachers -- make it fun" href="http://www.ted.com/talks/tyler_dewitt_hey_science_teachers_make_it_fun.html" target="_blank">ditched the jargon and extreme precision</a> and spent our precious time focusing on what makes the topic significant and dare I say fun? What if we presented topics in an <a title="situated-learning-theory" href="http://www.learning-theories.com/situated-learning-theory-lave.html" target="_blank">authentic context</a>? For the Krebs Cycle it might be the fact that it's the reason why we breathe or why some food is so delicious (hint: it has to do with carbohydrates and fats).

<strong>Active</strong>
Traditionally in a classroom, the teacher is the centre of the universe; he or she requires complete silence so that their distilled wisdom can be poured into the little brains of students. One has to ask, is this really the best way to teach/learn? Our brains are not sponges, they are complex organs that have been shaped by millions of years of evolution. We need to be active contributors to our learning rather than passive receivers of information <a title="What Makes Self-Directed Learning Effective?" href="http://www.sciencedaily.com/releases/2012/10/121004134843.htm" target="_blank">for many reasons</a>. <a title="TEAL: Technology Enhanced Active Learning" href="http://research.microsoft.com/en-us/news/features/teal.aspx" target="_blank">Active learning</a> involves interacting with peers, experimentation, play, practice, discovery and reflection. Even if lecturing works (it doesn't always), active learning is much more likely to plant a seed of interest which might grow into lifelong passion or appreciation.

<strong>Creative</strong>
We want our students to succeed in life and to make positive contributions, so in developing curricula we think about all of the important topics that they might need to understand. We keep piling on topic after topic until all we have time for is note taking and tests... It's quite impressive actually - a grade 12 chemistry student is supposed to understand organic chemistry, atomic chemistry, thermodynamics, chemical systems &amp; equilibrium and electrochemistry. Before we pile on more topics, I think we should take a moment to examine what we're doing. What are we preparing our students for? We're <a title="Ken Robinson TED" href="http://www.ted.com/talks/ken_robinson_says_schools_kill_creativity.html?qsha=1&amp;utm_expid=166907-20&amp;quote=88&amp;utm_referrer=http%3A%2F%2Fwww.ted.com%2Fspeakers%2Fsir_ken_robinson.html" target="_blank">preparing our students for an unpredictable future</a> by teaching them what we already know?

A more productive approach might be giving students an opportunity to learn and practice critical thinking, the ability to look up information, problem solving and <strong>creativity</strong>. Specific topics should be a means not an end. Ken Robinson defines creativity as "original ideas that have value", something that we could use more of given all of the problems that we currently have (global warming, energy crisis, economic inequality, bad education, etc.).

<strong>Collaborative
</strong>We have more knowledge, more data and our problems are more complicated. Scarce are the instances when an individual can make a major contribution without the help of others, yet we're still preparing individuals, not team members. The internet is "<a title="Reinventing Discovery: The New Era of Networked Science" href="http://press.princeton.edu/titles/9517.html" target="_blank">transforming the nature of our collective intelligence and how we understand the world</a>", so we need to prepare students for this new world.

A good start would be providing <a title="collaborative learning places" href="http://steve-wheeler.blogspot.ca/2013/03/false-frontiers.html" target="_blank">collaborative learning places</a>. We need to also teach students how to effectively use the collaboration tools that are at our disposal. Teachers of course can't teach collaboration unless they do some of it themselves in their own professional life - an issue I hope to address in a future blog post.

<strong>Differentiated
</strong>Learning is not a boolean value (yes or no), it's a journey and students are at different points in this journey. Students have different experiences, interests, personalities, family life, etc. We can't give them all the same learning experience and expect them to succeed. There needs to be a focus on <a title="The Difference Between 'Equity' and 'Equality'" href="http://laradavid.blogspot.ca/2008/07/difference-between-equity-and-equality.html" target="_blank">equity not equality</a>, a focus on giving each individual what they need to succeed even if they require more.

<span style="line-height: 1.6;">Understanding students can help educators create an education that is more relevant and </span>engaging because a variety of instructional techniques are used<span style="line-height: 1.6;">. In differentiated learning, students are given an opportunity to choose how they learn and how they demonstrate their learning.</span>

That's all I have for now but if you're reading this then I'm interested in hearing your opinion. What makes an exceptional learning experience?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2013-05-06 18:32:44</wp:post_date>
		<wp:post_date_gmt>2013-05-06 22:32:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-makes-an-exceptional-learning-experience</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="active-learning"><![CDATA[active learning]]></category>
		<category domain="post_tag" nicename="authentic-learning"><![CDATA[authentic learning]]></category>
		<category domain="post_tag" nicename="collaboration"><![CDATA[collaboration]]></category>
		<category domain="post_tag" nicename="creative"><![CDATA[creative]]></category>
		<category domain="post_tag" nicename="differentiated"><![CDATA[differentiated]]></category>
		<category domain="category" nicename="education"><![CDATA[Education]]></category>
		<category domain="post_tag" nicename="education-2"><![CDATA[education]]></category>
		<category domain="post_tag" nicename="equity"><![CDATA[equity]]></category>
		<category domain="post_tag" nicename="hacking-education"><![CDATA[hacking education]]></category>
		<category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
		<category domain="post_tag" nicename="meaningful-learning"><![CDATA[meaningful learning]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Ready to Teach Code: Red, Green, Refactor</title>
		<link>http://www.aomran.com/getting-ready-to-teach-code-red-green-refactor/</link>
		<pubDate>Mon, 27 May 2013 15:40:53 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="line-height: 1.6;">Start typing "everyone should" into Google and Google wil recommend the phrase "everyone should learn to code". Everyone from Bill Gates to Snoop Dogg are telling people that "</span><a title="Code.orb" href="http://www.code.org/" target="_blank">every student in every school should have the opportunity to learn to code</a><span style="line-height: 1.6;">". This is probably driven by the skills shortage in technology and the lack of a mainstream effort to get people involved in technology. Schools </span>certainly<span style="line-height: 1.6;"> don't take computer studies as seriously as Science and Math.</span>

Of course people can learn to code on their own but workshops/classes are a great way to introduce coding and get people interested enough to pursue further learning. There are a lot of these workshops - usually <span style="line-height: 1.6;">run by professionals in the software/web development field. The intention of this article is to help the wonderful professionals (with no formal training in education) who are getting ready to lead a workshop/class.</span>

You're a craftsperson, you know your stuff, but that doesn't mean you'll be an effective instructor. You might have experience presenting in front of an audience, but presenting/lecturing isn't the same as instructing/teaching. Lecturing works to some extent, just like your first attempt at writing an algorithm might work to some extent. What makes a craftsperson is their dedication to their craft and their obsession with perfection. To be a good instructor, you need to apply the attitude of a craftsperson - something you certainly can do because you already apply it in your own line of work. One way to prepare for a workshop would be to create slides, show up, and improvise! To me this is very much like coding without writing tests first. Test-driven development (TDD) is popular for a reason: it increases the quality of the code and the coder's productivity. I'll be using TDD as an analogy for how to prepare and teach a lesson.

<strong><span style="color: #ff0000; font-size: 1.5em;">Red</span></strong>

<span style="line-height: 1.6;">Before the workshop, just like a failing test, you should </span><em><span style="line-height: 1.6;">plan in detail</span></em><span style="line-height: 1.6;"> what you wish will happen during the workshop. This is your lesson plan; when you actually sit down to write what you expect to happen, you might find some surprises.</span>
<ul>
	<li><span style="line-height: 14px;"><strong>What are the learning outcomes?</strong> I.e., what do you <em>expect</em> that your students will learn? This should get you thinking about how realistic your expectations are. Will students be able to learn all of this in the given time?</span></li>
	<li><strong>Activity breakdown - </strong>break down everything you plan on doing along with an estimated time of completion. Try to be as realistic as possible but don't agonize over accuracy.</li>
	<li><strong>Materials</strong> - make a list of software/hardware that you and students will need for the workshop. Ideally this software should be downloaded before the workshop, otherwise time will be wasted during the workshop downloading and installing.</li>
</ul>
Look at your plan and <strong>ask yourself some questions</strong>:
<ul>
	<li><span style="line-height: 1.6;"><em>Is there a hook at the beginning to get people's attention?</em> This is your opportunity to raise the excitement level and get students a bit more motivated for the workshop. Maybe a </span><span style="line-height: 22px;">sneak peek</span><span style="line-height: 1.6;"> at the final stage of what the students will build will do the trick.</span></li>
	<li><span style="line-height: 1.6;"><em>Do I give students enough time to practice what I teach?</em>  If your audience is new to programming (or the specific topic you're teaching) you have to be careful not to overwhelm them. People are in a vulnerable situation when they're learning something new - so they are at risk of losing their confidence very quickly. "Chunk" your lesson, i.e., after explaining a concept give your students an opportunity to try it out for themselves.</span></li>
	<li><span style="line-height: 1.6;"><em>Am I addressing the learning outcomes?</em>  You have defined the learning outcomes but it's important to make them central to your lesson. It's good (pedagogically) to define some cornerstone concepts and then revisit them as often as possible.</span></li>
	<li><span style="line-height: 1.6;"><em>Do I make opportunities for students to demonstrate their learning?</em>  If a student asks a question then avoid answering them directly - bring the question to the whole class and start a discussion. Give students an </span><span style="line-height: 22px;">opportunity</span><span style="line-height: 1.6;"> to answer their peer's question. If you give students a few minutes to code on their own then fight the temptation to show the answer as soon as the time expires. After the coding session is over, get everyone's attention back and have student volunteers show and explain their work/code. Explaining their work can help solidify their understanding. For the ones who had difficulties - they get a chance to hear an explanation from someone else. Peers might explain concepts in a more accessible manner than the teacher.</span></li>
	<li><em style="line-height: 1.6;">If I were a student, how exciting would this lesson be?</em><span style="line-height: 1.6;">  Answering this question honestly will help you a great deal. If you imagine yourself being bored then chances are your students will be too. Usually just </span><span style="line-height: 22px;">swallowing</span><span style="line-height: 1.6;"> your ego and realizing that less of your "lecturing" and more hands on coding might be the solution.</span></li>
	<li><span style="line-height: 1.6;"><em>Do I end the lesson by reiterating the learning outcomes?</em>  Concepts are learned by repetition, </span><span style="line-height: 22px;">reiterate</span><span style="line-height: 1.6;"> the core concepts and give students some advice for moving forward. Also, take this </span><span style="line-height: 22px;">opportunity</span><span style="line-height: 1.6;"> to get students' feedback. An "exit card" might work well; just hand out a small piece of paper to each student and have them answer a couple of questions before they leave. "Tell me one thing you learned today" and "Make one suggestion for how this workshop could be improved" might be two good questions. The questions are worded purposefully to get students to </span><span style="line-height: 22px;">prioritize</span><span style="line-height: 1.6;">; they are more likely to tell you the thing they learned best and your biggest weakness. </span></li>
</ul>
<strong><span style="color: #339966; font-size: 1.5em;">Green</span></strong>

Ideally you write just enough code to make the test pass (green), nothing more. The same idea applies when you're delivering a lesson, stick to your plan as much as possible. You might need to do a bit of improvisation, but it should be minimal with a good lesson plan. As you deliver the lesson:
<ul>
	<li><span style="line-height: 14px;"><em>Don't be distant</em> - walk around the classroom to break the emotional and physical "barrier" between student and teacher. You'll be better informed of how students are doing and you'll be closer to receive questions from students. If you are presenting a slideshow then you might need a remote control (or a helping hand) so that you're not stuck at the front.</span></li>
	<li><em>You shouldn't have to raise your voice</em> - plan well in advance how long you're going to give students to complete an exercise/activity. Communicate your expectation and it will be much easier to regain students' attention.</li>
	<li><em>If you find yourself saying "i'll explain this later", then stop it</em>. There is no point in bringing up a topic without context and meaning.</li>
	<li><em>Explain, don't just show</em> - avoid showing or copy/pasting completed code; it takes someone relatively fluent in the language to decode it on the fly. Start from scratch every time and explain each line by using the core concepts. If you run out of time, cut content out, don't rush through it.</li>
	<li><em>Don't assume that students understand</em> - ask questions to check for understanding.</li>
	<li><em>Let students attempt to solve a question</em> individually or in groups before showing the solution.</li>
	<li><em>Observe</em> - throughout the lesson, take every opportunity to observe your surroundings. Keep asking yourself questions like - are students getting enough time to complete exercises, what is the response to the slides, what misconceptions are students forming (if any), etc.</li>
</ul>
<strong style="font-size: 1.5em;">Refactor</strong>

After the lesson, take the time to reflect on your experience and "refactor" the lesson plan. The idea is to keep the lesson's objectives and motives but change its implementation. Half-way through my Bachelors of Education I started to hate the word "reflect" because we had to do so much of it but I can't deny its importance. Your first lesson plan will look different from the second because you will learn a lot the first time you implement a lesson. A lot of your assumptions will be wrong, your time estimates will be off, and your teaching strategies will improve.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2013-05-27 11:40:53</wp:post_date>
		<wp:post_date_gmt>2013-05-27 15:40:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-ready-to-teach-code-red-green-refactor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="deliver-lessons"><![CDATA[deliver lessons]]></category>
		<category domain="post_tag" nicename="learning-to-code"><![CDATA[learning to code]]></category>
		<category domain="post_tag" nicename="lesson-plan"><![CDATA[lesson plan]]></category>
		<category domain="post_tag" nicename="reflect"><![CDATA[reflect]]></category>
		<category domain="category" nicename="teach-code"><![CDATA[Teach code]]></category>
		<category domain="post_tag" nicename="teaching-code"><![CDATA[teaching code]]></category>
		<category domain="post_tag" nicename="workshops"><![CDATA[workshops]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test</title>
		<link>http://www.aomran.com/test/</link>
		<pubDate>Wed, 12 Jun 2013 20:13:25 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[test]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2013-06-12 16:13:25</wp:post_date>
		<wp:post_date_gmt>2013-06-12 20:13:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>test</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1373066994]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning to Program — Journey to Proficiency</title>
		<link>http://www.aomran.com/learning-to-program-journey-to-proficiency/</link>
		<pubDate>Sat, 22 Jun 2013 13:53:37 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[I created my first website in 1998, during the days of Geocities, Tripod and and Angelfire. For more than a decade after that, I learned many marketable skills thanks to the culture of open source and sharing in the hacker community.

One skill that I never really learned was computer programming. Still, as a <a title="Chrysalis Web Solutions" href="http://www.chrysaliswebsolutions.com" target="_blank">freelance web developer </a>I was able to offer services such as SEO, Design/HTML/CSS, databases, deployment, troubleshooting and back-end development using open source PHP apps like Wordpress. It is surprising how much one can do without knowing too much about software development.

For many years I had the realization that I could be "dangerous" once I learned to program. The desire was there but my focus was on higher priorities - my formal education (science degree and then an education degree) and my freelance work.

A unique opportunity to learn programming presented itself during the fall of 2012. Top quality university computer science courses were made available through <a title="Coursera" href="https://www.coursera.org/" target="_blank">Coursera</a>. These courses started me on a journey into the software development world.

The <a title="Dreyfus model of skill acquisition" href="http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition" target="_blank">Dreyfus model of skill acquisition</a> is a good way of modelling my journey. The model suggests that learners go through five distinct stages when acquiring new skills.
<h1>Novice Stage - <em>“OMG my computer knows math”</em></h1>
<a title="Learn to program course" href="https://www.coursera.org/course/programming1" target="_blank">Learn to Program: The Fundamentals</a> and <a title="Interactive python class" href="https://www.coursera.org/course/interactivepython" target="_blank">An Introduction to Interactive Programming with Python</a> were instrumental in taking me from novice to advanced beginner. The courses were perfect for novices because instructions were clear, rules/recipes were given, there was close monitoring (deadlines for assignments, marks, quizzes, a lot of interactivity with the teachers). The coding environment was simple to set up.

I learned fundamentals: how programs work, memory, variables, built-in functions, types, defining functions, flow (conditionals, loops), mutability, etc.

<a title="Code School" href="http://www.codeschool.com/" target="_blank">Code School</a> (Try Ruby &amp; Try Git) and <a title="Codecademy" href="http://www.codecademy.com/" target="_blank">Codecademy</a> (Python, Ruby and Javascript tracks) were great places to get practice and apply the rules/recipes that I learned to other contexts. At this stage, getting acquainted with any other programming language became easy because patterns started to emerge. I realized that the rules and recipes that I learned can also be applied to other contexts. It became just a matter of learning syntax differences.
<h1>Advanced Beginner Stage - <em>“Getting out of the sandbox”</em></h1>
To go to the next stage I needed to get out of the "sandbox" so to speak and get experience dealing with "real world" situations. The first chapter of <a title="Rails Tutorial book" href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book#top" target="_blank">Michael Hartel's Rails Tutorial</a> book was a good start because I was taught to install RVM/Ruby/Rails and use the terminal and Git to deploy a Rails app to Heroku. Next I completed the <a title="Rails for zombies redux" href="http://www.codeschool.com/courses/rails-for-zombies-redux" target="_blank">Rails for Zombies Redux</a> course but I insisted on creating a “real app” and not just being content with the online exercises. To add authentication and authorization to the app I followed the screen casts from <a title="Rails Casts" href="http://railscasts.com/" target="_blank">Railscasts</a>. I also completed the jQuery Air course (now <a title="Try jQuery - new version of jQuery air" href="http://www.codeschool.com/courses/try-jquery" target="_blank">Try jQuery</a>) to get some practice with Javascript.

At this point I felt excited but pretty confused as well. There was a lot of stuff that I didn't understand. Still I built my first app (twitter clone) with authentication and authorization and a dash of Javascript so I started to feel competent.
<h1>Competent Stage - <em>“Time to dive into the details”</em></h1>
Work was a bit overwhelming at this point in the year; I had 30-40 students and we were preparing for the Ministry of Education inspection. So Christmas was a much needed break; I got two weeks to relax and complete some Code School courses. I completed Ruby courses (<a title="Rails for zombies 2" href="http://www.codeschool.com/courses/rails-for-zombies-2" target="_blank">Rails for Zombies 2</a>, <a title="Ruby Bits" href="http://www.codeschool.com/courses/ruby-bits" target="_blank">Ruby Bits</a>, <a title="Rails best practices" href="http://www.codeschool.com/courses/rails-best-practices" target="_blank">Rails Best Practices</a>), <a title="Git real" href="http://www.codeschool.com/courses/git-real" target="_blank">Git Real</a>, and JS courses (<a title="Coffeescript" href="http://www.codeschool.com/courses/coffeescript" target="_blank">Coffeescript</a>, <a title="Captain's log - jQuery air" href="http://www.codeschool.com/courses/jquery-air-captains-log" target="_blank">jQuery Captain's Log</a>, <a title="Backbonejs" href="http://www.codeschool.com/courses/anatomy-of-backbonejs" target="_blank">Anatomy of Backbone</a>).

In January I signed up and completed <a title="Saas course" href="https://www.edx.org/course/uc-berkeley/cs169-1x/software-service/691/" target="_blank">CS169.1</a> (Saas course from edX) and <a title="Intro to databases" href="https://class2go.stanford.edu/db/Winter2013/preview/" target="_blank">Introduction to Databases</a> (Stanford's class2go). A big picture started to form, relationships became clear and some misconceptions were replaced with solid understanding. However, rules started to pile up so it was pivotal that I start to organize knowledge and form patterns that are easier to remember.

In order to build a better conceptual model of software development, I found it necessary to get more practice and learn more real world programming concepts (such as BDD/TDD). So I completed the following:

* Built shopping cart app by following “<a title="Agile Rails Book" href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4" target="_blank">Agile Web Development with Rails</a>” book
* Completed Code School courses: <a title="Ruby bits 2" href="http://www.codeschool.com/courses/ruby-bits-part-2" target="_blank">Ruby Bits 2</a>, <a title="Testing with rspec" href="http://www.codeschool.com/courses/testing-with-rspec" target="_blank">Testing with Rspec</a> &amp; <a title="Rails testing for zombies" href="http://www.codeschool.com/courses/rails-testing-for-zombies" target="_blank">Rails Testing for Zombies</a>.
* Read <a title="Rspec Book" href="http://pragprog.com/book/achbd/the-rspec-book" target="_blank">Rspec book</a> and completed the hands-on tutorial
* Completed <a title="BDD Rails" href="https://tutsplus.com/course/bdd-rails-application/" target="_blank">BDD Tuts-premium course</a>

I took the time to learn more about the Ruby environment (Rack, Rake, RubyGems, Bundler) a few weeks ago, which helped me form connections. I used this knowledge to play around with the Jekyll and Sinatra gems.

At this point, I feel that Ruby makes more sense, now that I have a better understanding of OOP, metaprogramming, and the Ruby object model. BDD also makes more sense; I am able to write a Cucumber feature and use it to write Rspec specs and Ruby code. The past week or two, I took some time off to review/learn <a title="HTML5CSS3" href="http://www.codeschool.com/courses/functional-html5-css3" target="_blank">HTML5/CSS3</a>, <a title="Journey into Mobile" href="http://www.codeschool.com/courses/journey-into-mobile" target="_blank">Mobile First Design, Responsive Design</a>, and <a title="Sass" href="http://www.codeschool.com/courses/assembling-sass" target="_blank">Sass</a>/<a title="Sass part 2" href="http://www.codeschool.com/courses/assembling-sass-part-2" target="_blank">Compass</a> thanks to Code School and <a title="A book apart" href="http://www.abookapart.com/" target="_blank">some books</a>.

It's hard to say whether I am a "competent" developer at this point but I certainly know a great deal about the whole development stack and I have years of experience in web design/development. At any rate I will feel more "competent" once I organize my notes because they will help me form a framework around my skills/knowledge.

The real test of competency will be building a unique app from scratch. Fortunately, I already have a freelance project to work on that fits the bill. <a title="Voix Visuelle" href="http://voixvisuelle.ca/en/" target="_blank">Voix Visuelle</a> (long-term client) is an artists' center that has requested a Rails app to automate art submissions. I will be working closely with my wife, Paula Franzini, to complete this project, as she is the technical liaison.
<h1>Proficient Stage - <em>"Harder than it looks"</em></h1>
The software development knowledge and skills that I possess come almost exclusively from self-directed learning. For this reason, I felt that a formal approach (<a title="HackerYou" href="http://hackeryou.com/" target="_blank">HackerYou</a>'s Summer Academy) will help patch up some rough spots. The HackerYou program will be great because I am taking two months off (less work, less distractions) to really be immersed in software development. The program will be an opportunity to meet people who are in a similar situation and hopefully reciprocate some knowledge/skills/experiences.

I'm looking forward to a lot of practice this summer to build my intuition (knowledge and experience to tap into). To reach “proficient” status I will need to keep practicing and learning concepts such as:
<ul>
	<li><span style="line-height: 1.6;">OOP design concepts, more metaprogramming, Ruby object model</span></li>
	<li><span style="line-height: 1.6;">Best practices: </span><span style="line-height: 1.6;">scalability, </span><span style="line-height: 1.6;">maintainability, </span><span style="line-height: 1.6;">BDD/TDD, monitoring, performance tuning</span></li>
	<li><span style="line-height: 1.6;">SASS / multitenancy</span></li>
	<li><span style="line-height: 1.6;">Unix, VMs, VPS, AWS, Chef/Capistrano</span></li>
	<li><span style="line-height: 1.6;">Teamwork: </span><span style="line-height: 1.6;">Deploy app as team, continuous integration, </span><span style="line-height: 1.6;">collaborate with Git</span></li>
	<li><span style="line-height: 1.6;">Hacker Culture: </span><span style="line-height: 1.6;">open source, </span><span style="line-height: 1.6;">sharing/exchange of info, </span><span style="line-height: 1.6;">community/collaboration</span></li>
</ul>
<h1>Expert Stage - <em>“10 years later?”</em></h1>
This will hopefully come with time, lots of passion and lots of hard work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2013-06-22 09:53:37</wp:post_date>
		<wp:post_date_gmt>2013-06-22 13:53:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-to-program-journey-to-proficiency</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-school"><![CDATA[code school]]></category>
		<category domain="post_tag" nicename="codecademy"><![CDATA[codecademy]]></category>
		<category domain="post_tag" nicename="coursera"><![CDATA[coursera]]></category>
		<category domain="post_tag" nicename="e-learning"><![CDATA[e-learning]]></category>
		<category domain="category" nicename="education"><![CDATA[Education]]></category>
		<category domain="post_tag" nicename="education-2"><![CDATA[education]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
		<category domain="category" nicename="learning-software"><![CDATA[Learning software]]></category>
		<category domain="post_tag" nicename="learning-to-code"><![CDATA[learning to code]]></category>
		<category domain="post_tag" nicename="mooc"><![CDATA[MOOC]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HackerYou Summer Academy Week 1 - It&#039;s a Bootcamp</title>
		<link>http://www.aomran.com/hackeryou-summer-academy-week-1-its-a-bootcamp/</link>
		<pubDate>Fri, 05 Jul 2013 23:35:20 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[HackerYou started unofficially on July 1st (Canada Day)! My wife and I walked across the bridge from our side (Gatineau) into Ottawa to meet the diverse people in the HackerYou program. The first Summer Academy cohort is rather impressive, we are diverse in almost every way (gender, race, nationality, background, goals etc.) and it seems we're all determined to come out of this program with a new set of skills and a long list of new friends.
<h2>Day 1 - meet, greet and vagrant up</h2>
We spent the beginning of the first day learning more about our classmates. Everyone in the program is interesting, smart, dedicated, and friendly -- I have no idea how HackerYou managed to pull that off. The rest of the night was spent learning about the command line and getting a taste of Ruby on Rails. I have done quite a number of programming courses and one of the main challenges is finding a way to get all students on the same development environment. The edX SASS course used virtual box but we had to open up a linux user interface and do all of our work in it, a good idea but still not ideal. Edward and Nick (Shopify geniuses) found a more elegant solution, they set up a virtual machine using vagrant. Now all students have the same environment for running code but can use their own os (mac, windows etc.) for writing code. The nerd in me just loves what they were able to do. No need to install ruby, rails, git, etc -- we just ssh into our virtual machine and run our code!

I started using the command line about 9-10 months ago, so I already knew the basic commands (cd, ls, pwd, mkdir) and I was familiar but not 100% comfortable with others (mv, rm, rmdir, cat and cp). What was completely new was the concept of pipes, redirects and appends -- the nerd in me just loves all of the things we can do with these new concepts.

Edward &amp; Nick showed us the obligatory "Get excited - lets build an app in 15 minutes with Rails!". I have built small rails apps before so this wasn't new but fun nonetheless. The rest of the time was spent working on a mini rails app of our choice (well anything time/date related).
<h2>Day 2 - Git and Present</h2>
My understanding of Git was ok but to be honest I haven't ventured too deep. I was able to add, commit and push and felt pretty good about it. My goal for this summer is to really push the pace and get a deeper understanding of all the topics discussed. So my focus for the second day was on more complex techniques in git (branching, merging, reversing changes, forking and pulling changes from a remote).

The rest of the time was spent working on my Rails time app. I ended up creating a simple rails app that takes in birth dates as input and then calculates how many days the person has been alive. The app then finds out how many times the person could have done Summer Academy if they gave up sleep. A pointless app but hey it works and I got to present it to the class! Some of the presenters showed off their impressive design skills (not a strength for me but I'll work on it).
<h2>Day 3 - Ruby and Sinatra</h2>
Mike is a mentor at HackerYou that I met in the local Ottawa Ruby Meetup. He's interested in education (as am I) so it was interesting to see him give a mini lesson on the command line and Ruby basics. I thought he did a good job "demystifying" the command line. The command line is just a way to run programs and unix programs are numerous but they 'ideally' just do one thing well. So 'ls' is a program that lists files/folders. The command line looks up these programs in the $PATH (a colon separated list of paths) until it finds the program.

My understanding of Ruby is at least at the intermediate level so while most students did the "Ruby in 100 Minutes" tutorial I took the time to do a more challenging exercise. I created a little Ruby app that uses the Twitter gem to connect to the Twitter API. The app doesn't do anything impressive but I learned a lot about API authentication, JSON parsing, requiring ruby files and gems, etc. For the rest of the time (until the evening lesson) I pair programmed with my wife, we built a little ruby program that printed the lyrics to the "99 Bottles of Beer" folk song.

During the scheduled evening lesson for the day, Nick used the Sinatra gem to explain the concept of REST and we rebuilt the controller portion of a Rails app. I personally thought that this was an excellent exercise. Rails has a lot of "magic" so any opportunity to see how things really work is welcome.
<h2>Day 4 - Time to Teach</h2>
Saying that I love to teach is a huge understatement, I like to take every opportunity to teach what I know. This morning, Heather decided to split the group up into "teachers" and "learners" and we spent most of the day working on Ruby, Rails and Git exercises together. I got the opportunity to share what I know and I learned a LOT. I learned more today than the previous three days mainly because the process of articulating what I know helps build and strengthen connections.

I did make a major breakthrough today, I got my first ever pull request and successfully merged the contribution into a repository! As silly as it may sound, the experience was exhilarating (thank you Nachiket and Jamie!).
<h2>Day 5 - Back to the Future?</h2>
Tomorrow will be the fifth and final day for this week. I'm certainly looking forward to it and for the rest of the summer. My goal is to keeping pushing myself this summer, even if it takes me outside of my comfort zone. I got the courage to talk to a Shopify employee today… so that's a start (I'm not too social so this is a triumph that I should get a star sticker for).

It's amazing what a program like HackerYou can do in a short amount of time. After merely **four days** I feel that I can navigate the command line much better, I have more experience collaborating on a git repo and I have more confidence with Ruby/Rails/Sinatra.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2013-07-05 19:35:20</wp:post_date>
		<wp:post_date_gmt>2013-07-05 23:35:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hackeryou-summer-academy-week-1-its-a-bootcamp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bootcamp"><![CDATA[bootcamp]]></category>
		<category domain="post_tag" nicename="hackeryou"><![CDATA[hackeryou]]></category>
		<category domain="category" nicename="learning-software"><![CDATA[Learning software]]></category>
		<category domain="post_tag" nicename="learning-to-code"><![CDATA[learning to code]]></category>
		<category domain="post_tag" nicename="summer"><![CDATA[summer]]></category>
		<category domain="post_tag" nicename="summer-academy"><![CDATA[summer academy]]></category>
		<category domain="category" nicename="teach-code"><![CDATA[Teach code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning More Advanced Git and Github Techniques</title>
		<link>http://www.aomran.com/learning-more-advanced-git-and-github-techniques/</link>
		<pubDate>Mon, 08 Jul 2013 01:59:43 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[The first time I used git (almost a year ago), I have to admit that it was bewildering but I have come a long way since. For a while I have been confined to a few commands (git add, git commit, and git push) but we used git so much this past week at HackerYou that I felt comfortable enough to finally learn some more advanced techniques. Having many classmates to work with and so many repos to play with has really accelerated my learning.

Here I want to share some Git and Github tips/tricks that I learned during the first week of HackerYou's Summer Academy. We are doing all of our work inside a virtual machine (running Ubuntu 12.04), so everything here assumes a Linux operating system.
<h2>Navigating and Troubleshooting Git</h2>
Here are a few commands that I think are very useful for navigating a git repository and troubleshooting common problems.
<ul>
	<li><span class="lang:sh decode:true  crayon-inline ">$ git status</span> : Pretty much my go to command whenever I want to check the state of the repo. It tells me what files are staged, what files are modified but not staged and lets me know if there are new or deleted files that are not tracked by git. I attempt to use this command as much as possible, especially before committing changes.</li>
	<li><span class="lang:sh decode:true  crayon-inline ">$ git log</span> : Outputs the entire commit history and is very useful for seeing the work that has been done so far. I find that this is a good way to get the SHA-1 hash that can be used to reference a specific commit.</li>
	<li><span class="lang:sh decode:true  crayon-inline ">$ git checkout</span> : This is a very versatile command which allows you to pretty much go anywhere. You can use it to switch to a branch, tag, commit or file. Use <span class="lang:sh decode:true  crayon-inline ">$ git log</span>  to find the SHA-1 hash reference number for a specific commit and then <span class="lang:sh decode:true  crayon-inline ">$ git checkout &lt;commit&gt;</span>  to see how your repo looked on that commit. You can grab an old version of a file with <span class="lang:sh decode:true  crayon-inline ">$ git checkout &lt;commit&gt; &lt;file&gt;</span> .</li>
	<li><span class="lang:sh decode:true  crayon-inline ">$ git remote -v</span> : This command will show you a verbose list of the remote repositories (with names and URLs). Knowing the name is important because we need it for the push/fetch commands and the URL can help us resolve connectivity issues.</li>
	<li><span class="lang:sh decode:true  crayon-inline ">$ git remote rm &lt;remote&gt;</span> : If we add the wrong remote then it's no big deal, we can remove a remote by passing its name to this command.</li>
	<li><span class="lang:sh decode:true  crayon-inline">$ git branch -v</span> : This shows us a list of the branches that we have and a star (<strong>*</strong>) lets us know what branch we are on. Use <span class="lang:sh decode:true  crayon-inline">$ git branch -d &lt;branch&gt;</span>  to delete a branch.</li>
	<li><span class="lang:sh decode:true  crayon-inline ">$ git branch -rv </span> : This shows us a list of the <strong>remote</strong> branches, which can come in handy if you want to <a title="Checking out Pull Requests locally" href="https://help.github.com/articles/checking-out-pull-requests-locally" target="_blank">checkout a pull requests locally</a>.</li>
</ul>
<h2>Hub Command Line Tool</h2>
Leaving the command line to create a Github repository in the browser (and then adding it as a remote) can get tedious. <a title="Hub command line tool" href="https://github.com/defunkt/hub" target="_blank">Hub</a> is a command line tool that uses Github's API to allow you to do a lot of cool things from the command line.
<h3>1. Installing Hub</h3>
The instructions on Hub's Github repo won't work for the VM for two reasons: 1. ~/bin/ doesn't exist and 2. we need to use 'sudo' to have the proper permissions to execute the commands. So here are the modified commands.
<pre class="lang:sh decode:true">$ sudo curl http://defunkt.io/hub/standalone -sLo /bin/hub
$ sudo chmod +x /bin/hub</pre>
After installing Hub, check that it was installed: <span class="lang:sh decode:true  crayon-inline ">$ hub version</span> .
<h3>2. Creating a Github Repo from the Command Line</h3>
From the command line, navigate to a git repository and create a Github repo with:<span class="lang:sh decode:true  crayon-inline crayon-selected">$ hub create  -d "Description of repo"</span> . This will create a Github repo with the same name as the git repo and add the description. The Github repo will automagically be added as a remote called "origin". Push your code <span class="lang:sh decode:true  crayon-inline ">$ git push -u origin master</span>  and everything is done!
<h2>Connecting to Github with SSH</h2>
Github allows you to connect via HTTPS or SSH. With the HTTPS URLs you will be prompted for a password. With SSH you just need an SSH keypair stored on your VM. I personally prefer to use SSH. Getting the VM ready for SSH is simple:
<ol>
	<li><span class="lang:sh decode:true  crayon-inline">$ ls ~/.ssh</span>  to see if you have an SSH keypair (usually named id_rsa and id_rsa.pub). The one with the '.pub' extension is the public key (the one you share with Github).</li>
	<li>If there are no ssh keys then <span class="lang:sh decode:true  crayon-inline ">$ ssh-keygen</span>  to make a pair. If you added a passphrase for the key (optional but recommended) then run <span class="lang:sh decode:true  crayon-inline ">$ ssh-agent bash</span> <code> and <span class="lang:sh decode:true  crayon-inline ">$ ssh-key add</span> </code> so that you don't need to re-enter it every time.</li>
	<li><span class="lang:sh decode:true  crayon-inline ">$ cat ~/.ssh/id_rsa.pub</span>  and copy the output. Then go to the account settings on Github and click "SSH Keys". Add the key there and remember to give it a memorable name.</li>
	<li>Check that you are indeed able to connect via SSH with: <span class="lang:sh decode:true  crayon-inline ">$ ssh -T git@github.com</span></li>
</ol>
If the above isn't set up properly then you will see the following error when trying to pull or push to Github with SSH URLs:
<pre class="nums:false nums-toggle:false lang:default highlight:0 decode:true">permission denied (publickey)
fatal: The remote end hung up unexpectedly</pre>
Resource: <a href="https://help.github.com/articles/generating-ssh-keys#platform-linux" target="_blank">Generating SSH Keys</a>
<h2>Github Help is Helpful!</h2>
The <a href="https://help.github.com/" target="_blank">documentation</a> at Github is superb. Here are a few gems that I found:
<ul>
	<li><a href="https://help.github.com/articles/syncing-a-fork" target="_blank">Syncing a fork</a></li>
	<li><a href="https://help.github.com/articles/creating-a-pull-request" target="_blank">Creating a pull request</a></li>
	<li><a href="https://help.github.com/articles/checking-out-pull-requests-locally" target="_blank">Checking out Pull Requests locally</a></li>
	<li><a href="https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line" target="_blank">Resolving a merge conflict from the command line</a></li>
</ul>
<h2>Resources for Learning Git</h2>
<ul>
	<li><a href="http://www.atlassian.com/git" target="_blank">Atlassian Git Tutorials</a> (excellent explanations)</li>
	<li><a href="http://chimera.labs.oreilly.com/books/1230000000561/index.html" target="_blank">Git Pocket Guide</a> (free ebook)</li>
	<li><a href="http://training.github.com/resources/videos/" target="_blank">Videos from Github Training</a></li>
	<li><a href="http://www.codeschool.com/courses/git-real" target="_blank">Code School's Git Real Course</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2013-07-07 21:59:43</wp:post_date>
		<wp:post_date_gmt>2013-07-08 01:59:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-more-advanced-git-and-github-techniques</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="git-2"><![CDATA[git]]></category>
		<category domain="category" nicename="github"><![CDATA[Github]]></category>
		<category domain="post_tag" nicename="github-2"><![CDATA[github]]></category>
		<category domain="post_tag" nicename="hackeryou"><![CDATA[hackeryou]]></category>
		<category domain="category" nicename="hackeryou-2"><![CDATA[HackerYou]]></category>
		<category domain="post_tag" nicename="hub"><![CDATA[hub]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
		<category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HackerYou Summer Academy Week 2 - Thinking Like a Programer</title>
		<link>http://www.aomran.com/hackeryou-summer-academy-week-2-thinking-like-a-programer/</link>
		<pubDate>Sun, 14 Jul 2013 02:27:06 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[The second week of HackerYou's Summer Academy went by in a blur. My comfort level with the material covered is pretty high, so I ended up pushing myself to do something a level or two higher in difficulty. I guess I had so much fun refactoring my code to use more advanced techniques, pair programming, and testing that the week just flew by.

We worked on at least five different Ruby exercises and spent a good amount of time working with Ruby on Rails. We got the opportunity to add some Bootstrap styles to Rails applications and I took some time to practice Javascript/jQuery on some Rails applications as well.

The (overwhelming?) amount of programming that we're doing is certainly paying off. I feel right at home in the command line, I'm using "advanced" Git/Github techniques, and programming feels a lot more natural.

The main takeaway (for me at least) this week was that it's important to think like a programmer. This means several things:
<h2>Start small then expand</h2>
Novice programmers can get stuck trying to think about the final solution to the problem. Right now I feel I am a better programmer because I force myself to start small. I tell myself that I should slowly build the program and not tackle too much at a time. What's important is that I get something working and then build additional functionality later.
<h2>We code once, read many many times</h2>
There is no sense worrying about how many lines a program takes. A longer program might in fact be better if it's easier to read. Simply put, our code needs to be <em>readable</em>. This means others should be able to understand it and we should be able to pick it up months from now and continue where we left off.
<h2>Modular and Single Responsibility</h2>
Methods should ideally do one thing. This makes them easier to understand, easier to test and easier to modify and adapt. And I should add that the methods become easier to write.

Classes should also have a single responsibility, but I find that this is easier said than done. Ideally we would extract out code into another class if possible. With many small methods/classes, our code will read like a natural language (English) and be a lot easier to follow.

This week I spent quite a bit of time thinking about what belongs in a class or method; I am taking these design decisions a lot more seriously. The result is that my code is better.
<h2>Test First</h2>
For the past year I had the unfortunately common experience of working with a codebase that had zero tests. I was responsible for making sure an eCommerce website and a student database were running smoothly. The technology stack was hacked together by many different people over many years and had no tests or documentation. The experience was frustrating so to be honest I was sold on testing before writing a single test.

I should say that by "test", I mean writing code that automatically tests your code. These automatic tests are run from the command line and ideally would finish checking the code in a matter of seconds. Automatic tests save a tremendous amount of time because running automatic tests takes a fraction of the time that is required to verify our code in a browser or REPL.

Tests ensure that the code is well designed because bad code is hard to write tests for. Tests make it simpler to build on/extend/improve the software because we can be confident that we didn't break previous functionality.

Testing also does something that we sometimes take for granted; it sets intentions. The process of writing a test gets us to think about what our program should do and gets us to define what "done" means.

Test Driven Development is the process of writing tests first and then using them to drive the creation of the code. I personally feel that TDD makes me a much better programmer; it allows me to solve problems that I couldn't hope to solve without it.

So far I understand that it's important to keep tests <strong>small</strong> (single assertion in each test) and <strong>independent</strong> (meaning running them in a random order should give the same result every time). And of course test first.
<h2>Pair Programming</h2>
There were many opportunities this week for pair programming. My goal this summer is to try to pair-program as much as possible because it's an extremely effective way of coding, it's enjoyable, and many software companies use it almost exclusively.

Pair programming requires good communication but most importantly it requires good critical thinking skills. Ask good questions if you don't understand what is being coded. Sometimes it's hard to understand what your partner is trying to do.

With pair programming I find that solutions to complicated problems can be arrived at much more quickly. The solutions are also better designed and have a higher chance of being production quality.
<h2>Don't get carried away</h2>
And last but not least, if it's working and the design looks good (not necessarily perfect) then move on.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2013-07-13 22:27:06</wp:post_date>
		<wp:post_date_gmt>2013-07-14 02:27:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hackeryou-summer-academy-week-2-thinking-like-a-programer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hackeryou"><![CDATA[hackeryou]]></category>
		<category domain="category" nicename="hackeryou-2"><![CDATA[HackerYou]]></category>
		<category domain="category" nicename="learning-software"><![CDATA[Learning software]]></category>
		<category domain="category" nicename="oop"><![CDATA[OOP]]></category>
		<category domain="post_tag" nicename="pair-programming"><![CDATA[pair programming]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HackerYou Summer Academy Week 3 – Being Resourceful</title>
		<link>http://www.aomran.com/hackeryou-summer-academy-week-3-being-resourceful/</link>
		<pubDate>Sun, 21 Jul 2013 04:12:46 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[Another Summer Academy week zipped by; a week of ruby programming, pair programming, Test Driven Development (TDD), learning, listening, and teaching. Sitting here and reflecting on what happened makes me truly appreciate the unique opportunity that I am getting this summer. One can learn a lot on their own (and I have) but there are things that you just can't do alone.

You don't get an opportunity to teach what you know when you're alone. You don't get to see people go through the same emotions/frustrations that you went through (or are going through) while learning. You don't get to see how professional developers approach and solve a problem. You don't get to talk to people who are full-time employees of one of the hottest startups in Canada (the world?). You don't get people checking up on you, keeping you honest about the goals that you set for yourself.

The main takeaways for this week are "be resourceful" and "be yourself and do what you love".
<h2>On Being Resourceful</h2>
Being a programmer is partly knowing the technology but this takes a backseat to being resourceful. Being resourceful means solving problems, being inventive, creative, clever, talented and able. It means always taking the time to think about a problem and then asking yourself (and others) some very good questions. It means being able to gather information, analyze this information and then make reasonable conclusions.
<h3>Reading errors</h3>
Errors are rather scary to a novice programmer; this fear combined with the cryptic nature of errors can be a formidable force. Going beyond the novice stage requires a programmer to make peace with the errors, and hey maybe even become friends. Errors give a lot of useful information so learning what they say is key. Beyond just helping us fix broken code they can also be the driving force behind the creation of code in TDD. Errors produced by the test code can pretty much tell you what code you need to write.
<h3>Finding information</h3>
Knowing enough to properly phrase a question can make a programmer very resourceful because it means there's a high chance the answer is one google search away. I feel (happily) that I am at a stage of my programming adventure where I know how to phrase my questions, so finding answers becomes rather easy.

I navigate the <a title="Ruby Docs" href="http://ruby-doc.org" target="_blank">Ruby docs</a> when I have questions about syntax, I browse the <a title="Rails API" href="http://api.rubyonrails.org" target="_blank">Rails API</a> when I want to learn what a helper method does, I look at the <a title="Rails Guides" href="http://guides.rubyonrails.org" target="_blank">Official Rails Guides</a> when I want to know the magic behind Rails, and for gems I combine the powers of <a title="Rubygems" href="http://rubygems.org" target="_blank">rubygems.org</a>, <a title="Ruby Toolbox" href="https://www.ruby-toolbox.com" target="_blank">Ruby Toolbox</a> and <a title="Github" href="http://www.github.com" target="_blank">Github</a>.
<h3>Rebuilding apps</h3>
The book "Agile Web Development with Rails" gives a step by step guide on how to build a shopping cart - an appropriate exercise given the setting (Shopify)! I already went through the book before the course so I took some time to read my code and made some notes about how the whole app works. Building the shopping cart while following the guide felt like only a partial learning exercise - I felt that I needed to rebuild the app without help from the book. So part of this week was spent building the cart from the start, this time with TDD and without any of the junk that the scaffold produces. I didn't refer to the book but I was looking at the depot code and my own notes.

My hope is that soon I'll have a fully functional shopping cart app that was built with TDD, that I fully understand and that I feel I truly built.
<h3>Side Projects</h3>
My wife (Paula) and I have been pair programming and collaborating on two side projects. <a title="Holly App" href="http://hollyapp.herokuapp.com" target="_blank">Holly</a> is a senile AI computer that at the moment can only answer arithmetic questions (working on this!) and Hex, a quiz/game to help people learn colour hexadecimal codes. Both are coming along nicely - I'll write more about them in the future.

Through these side projects I've been learning javascript, rails views/partials, TDD, using models without a database, using APIs, and much more.

Other than learning (a lot) we're having tons of fun and by the end of the summer our Github accounts will have no shortage of cool repos to show off.
<h2>On Being Yourself and Doing What You Love</h2>
We had the privilege this week of listening to many talks from Shopify staff - including Harley Finkelstein (CPO of Shopify) and Doug Tetzner (Talent Scout at Shopify). The message was pretty much "do what you love and with the right people" and "work needn't be a separate category, one should ideally blur the line between work and play". I personally am passionate about web/software development and education so if these passions can be part of my everyday life then I am a happy man.

Doug pointed out that we should be ourselves, be real, and be honest about who we are and what we want to achieve. This was a relief, to be honest, because too much talk of "selling yourself" does tend to make me queasy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2013-07-21 00:12:46</wp:post_date>
		<wp:post_date_gmt>2013-07-21 04:12:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hackeryou-summer-academy-week-3-being-resourceful</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="be-yourself"><![CDATA[be yourself]]></category>
		<category domain="category" nicename="education"><![CDATA[Education]]></category>
		<category domain="category" nicename="hackeryou-2"><![CDATA[HackerYou]]></category>
		<category domain="category" nicename="learning-software"><![CDATA[Learning software]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="reading-docs"><![CDATA[reading docs]]></category>
		<category domain="post_tag" nicename="reading-errors"><![CDATA[reading errors]]></category>
		<category domain="post_tag" nicename="searching-for-information"><![CDATA[searching for information]]></category>
		<category domain="post_tag" nicename="shopify"><![CDATA[shopify]]></category>
		<category domain="post_tag" nicename="side-projects"><![CDATA[side projects]]></category>
		<category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HackerYou Summer Academy - Half Way Point</title>
		<link>http://www.aomran.com/hackeryou-summer-academy-half-way-point/</link>
		<pubDate>Fri, 02 Aug 2013 21:07:18 +0000</pubDate>
		<dc:creator>riverjade</dc:creator>
		<guid isPermaLink="false">http://www.aomran.com/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[As we are officially past the half-way point of HackerYou's Summer Academy, it's a good point to stop and reflect on the experience so far. First I should say that this has been a great experience so far -- I have no second thoughts whatsoever about having chosen to do it. Summer Academy feels very much like the Bachelor of Education experience that I had two years ago. An interesting educational experience, so many things learned and many interesting people met. I guess the big difference is that the job prospects for developers are about a hundred times better than for teachers.

Here are some takeaways from the course so far:
<h2>Over 200 commits later</h2>
Before Summer Academy started, I wrote:
<blockquote>I’m looking forward to a lot of practice this summer to build my intuition (knowledge and experience to tap into). To reach “proficient” status I will need to keep practicing and learning...</blockquote>
Well I certainly have been practicing; this course so far has given me plenty of opportunities to write code. More than 200 git commits later, I feel a lot more comfortable programming. With every commit, I feel a bit closer to "proficiency". My plan for the second half of this course involves even more coding; my goal is to break the 500 commits "milestone". It's a pretty simple concept, the more code we write the easier it gets and the more skilled we get.
<h2>First open-source contribution</h2>
We used the Carrierwave gem to add photo uploading capabilities to our twitter clone app. The instructors followed the rather cryptic README directions on the gem's Github repo to get the gem working. As a challenge we were asked to improve the README file and submit a pull request.

My contribution was a "Quick Start for Ruby on Rails" section so that people can get the gem up and running on a Rails app very quickly. This should be useful for people who are testing the gem out or who have a simple implementation in mind. Who knows if this pull request will get merged but I know that there are some students who are benefiting from the addition.

The thought of making a pull request was scary at first but the worst that can happen is that the pull request gets ignored. The upside is that I can now say that I made a contribution to an open source project and the next contribution will be easier to make.
<h2>Designing an app</h2>
Before coding, it's a good idea to sit down with old-fashioned pen and paper, and sketch out the models and their attributes and relationships. Many design decisions happen at this stage so iterate here to make the associations as simple as possible.

This part is very hard to get right but it's important to keep one thing in mind, simplify. If something seems complicated then it might be that you're over-thinking things. Complicated relationships could just mean that you're missing a model.

After the design stage, we write some tests and implement the code. This part is easy as pie (well as making a pie… which I hear is hard).
<h2>Rails components as lego blocks</h2>
What's interesting is Rails is more like an ecosystem than a single entity. The components of Rails are like lego blocks. Once one understands the components of Rails… one can combine them in arbitrary (and creative) ways to build whatever they want. Once you know the major components and have the skills to research the rest… well what's left is to just sit down and build stuff. As you build apps you gain interesting experiences and learn how to solve common problems.
<h2>Just build it</h2>
Keeping code DRY, testing, maintenance, scalability, readability, doing things the "right way", all of this can paralyze someone who is new to programming. What I have learned so far is that it's important to start small and <strong>just get something working</strong>. People will differ in opinion about what the "right way" is anyhow and scalability is not an immediate issue when we're trying to build a MVP. We shouldn't worry about "perfect code" or anything of that nature, just build something. Code is malleable enough, it can be improved upon in the future. One key thing though… if you can write tests for the code then future improvements will be much easier (and more likely).
<h2>Testing is good</h2>
There are many testing philosophies. And different projects will require different solutions. But at the end of the day, doing "some" testing is better than no testing at all. So pick a strategy and go with it. Writing tests makes development a lot simpler. Changing implementation becomes just a matter of running the tests and fixing errors. Confidence in the application goes through the roof.

After talking with one of the mentor's last week, I decided to start with integration tests using the Capybara DSL. This tests the interface of the app -- it tests how the user would use the app. Then if needed, I drill down and write some functional tests. This usually happens if I need to test something that I can't test from inside an integration test.

Model/unit tests are rare, this is only for validations and custom business logic in the models. For many situations, very little of this is needed.
<h2>Teaching is a great way to learn</h2>
I spent last weekend preparing for a "lighting talk" type presentation that I gave on Monday to fellow HackerYou students. The purpose of the presentation was to give a big picture (and very visual) overview of how the shopping cart app works. My hope was that a visual presentation (UML Diagrams and Flow Charts) might help people understand the big picture better. Many students told me that the presentation was very informative - which is great. What I do know for sure is that my understanding of the material is much better after preparing and delivering the presentation.
<h2>Work on a real app</h2>
At Voix Visuelle (an art gallery that my wife is associated with), artists mail in their work and application forms on a CD/DVD. A lot of manual work is involved during the processing of these submissions.

This week I started working on the rails application to ease these types of administrative processes at art galleries. This app will allow art galleries to accept art submissions online, automating a traditionally very manual process.

It's satisfying to know that real users will use this app in September. The app presents me with intellectually stimulating problems and lots of practice. There is also a chance that I can make this app into a Saas or make a profit freelancing installations for artist galleries/centres.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2013-08-02 17:07:18</wp:post_date>
		<wp:post_date_gmt>2013-08-02 21:07:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hackeryou-summer-academy-half-way-point</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="art-submissions-app"><![CDATA[art submissions app]]></category>
		<category domain="category" nicename="education"><![CDATA[Education]]></category>
		<category domain="post_tag" nicename="git-2"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="git-commits"><![CDATA[git commits]]></category>
		<category domain="category" nicename="hackeryou-2"><![CDATA[HackerYou]]></category>
		<category domain="post_tag" nicename="just-build-it"><![CDATA[just build it]]></category>
		<category domain="category" nicename="learning-software"><![CDATA[Learning software]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open-source]]></category>
		<category domain="post_tag" nicename="real-app"><![CDATA[real app]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
		<category domain="category" nicename="teach-code"><![CDATA[Teach code]]></category>
		<category domain="post_tag" nicename="teaching-code"><![CDATA[teaching code]]></category>
		<category domain="post_tag" nicename="uml"><![CDATA[UML]]></category>
		<category domain="category" nicename="web-development"><![CDATA[Web Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
